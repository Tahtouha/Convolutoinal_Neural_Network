# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Ph89FzOVrWxo_2nmP1ZBzT3U8jGFiLu

#Imports
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image, ImageOps

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()
# Normalizing
train_images, test_images = train_images / 255.0, test_images / 255.0

print(train_images[0].shape)

"""#Class names"""

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer','dog', 'frog', 'horse', 'ship', 'truck']

"""#Verifying dataset"""

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])
    # The CIFAR labels happen to be arrays, 
    # which is why you need the extra index
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

"""#Convolution layers"""

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

model.summary()

"""#Adding a dense layer (NN)"""

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

model.summary()

"""#Training"""

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=10, 
                    validation_data=(test_images, test_labels))

"""#testing"""

plt.imshow(test_images[0])
print(class_names[int(test_labels[0])])

"""#Adapt for single image"""

def single_image_predict(img):
  plt.imshow(img)
  img = img.reshape((1,) + img.shape)
  print(class_names[np.argmax(model.predict(img))])

imgCar = Image.open("car.jpeg")
imgArray = np.array(imgCar)
single_image_predict(imgArray)

model.save("CNNmodel.h5")

